<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网页搭建</title>
    <link href="/2024/07/14/build-page-by-hexo/"/>
    <url>/2024/07/14/build-page-by-hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="c-分配空间"><a href="#c-分配空间" class="headerlink" title="c 分配空间"></a>c 分配空间</h2><h3 id="使用结构体"><a href="#使用结构体" class="headerlink" title="使用结构体"></a>使用结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Data</span> &#123;</span><br>    <span class="hljs-type">float</span> *floatArray;<br>    <span class="hljs-type">char</span> *charArray;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">5</span>;  <span class="hljs-comment">// 假设有5个浮点数和4个字符</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Data</span> *<span class="hljs-title">data</span> =</span> (<span class="hljs-keyword">struct</span> Data *)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> Data));<br>    data-&gt;floatArray = (<span class="hljs-type">float</span> *)<span class="hljs-built_in">calloc</span>(n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>));<br>    data-&gt;charArray = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">4</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));<br><br>    <span class="hljs-comment">// 现在你可以访问和操作data结构中的浮点数和字符数组了</span><br><br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-built_in">free</span>(data-&gt;floatArray);<br>    <span class="hljs-built_in">free</span>(data-&gt;charArray);<br>    <span class="hljs-built_in">free</span>(data);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拼接不同类型空间"><a href="#拼接不同类型空间" class="headerlink" title="拼接不同类型空间"></a>拼接不同类型空间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n1 = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> n2 = <span class="hljs-number">4</span>;<br><br>    <span class="hljs-comment">// 分配第一个数组（整数数组）</span><br>    <span class="hljs-type">int</span> *intArray = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">calloc</span>(n1, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n1; i++) &#123;<br>        intArray[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 分配第二个数组（浮点数数组）</span><br>    <span class="hljs-type">float</span> *floatArray = (<span class="hljs-type">float</span> *)<span class="hljs-built_in">calloc</span>(n2, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n2; i++) &#123;<br>        floatArray[i] = i + <span class="hljs-number">0.5</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建一个新的数组，将intArray和floatArray拼接起来</span><br>    <span class="hljs-type">int</span> totalSize = n1 + n2;<br>    <span class="hljs-type">void</span> *combinedArray = <span class="hljs-built_in">malloc</span>((n1 * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)) + (n2 * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>)));<br><br>    <span class="hljs-comment">// 将intArray和floatArray的内容拷贝到combinedArray</span><br>    <span class="hljs-built_in">memcpy</span>(combinedArray, intArray, n1 * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">char</span> *)combinedArray + n1 * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>), floatArray, n2 * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">float</span>));<br><br>    <span class="hljs-comment">// 现在combinedArray包含了intArray和floatArray的元素</span><br><br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-built_in">free</span>(intArray);<br>    <span class="hljs-built_in">free</span>(floatArray);<br>    <span class="hljs-built_in">free</span>(combinedArray);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态创建二维数组"><a href="#动态创建二维数组" class="headerlink" title="动态创建二维数组"></a>动态创建二维数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> rows = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> cols = <span class="hljs-number">4</span>;<br><br>    <span class="hljs-comment">// 分配二维数组</span><br>    <span class="hljs-type">int</span> **array2D = (<span class="hljs-type">int</span> **)<span class="hljs-built_in">calloc</span>(rows, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span> *));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rows; i++) &#123;<br>        array2D[i] = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">calloc</span>(cols, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 现在你可以使用array2D作为一个3x4的二维数组来存储和访问数据</span><br><br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rows; i++) &#123;<br>        <span class="hljs-built_in">free</span>(array2D[i]);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(array2D);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态字符串"><a href="#动态字符串" class="headerlink" title="动态字符串"></a>动态字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> *str = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">6</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));  <span class="hljs-comment">// 分配初始内存空间</span><br>    <span class="hljs-built_in">strcpy</span>(str, <span class="hljs-string">&quot;Hello&quot;</span>);<br><br>    <span class="hljs-comment">// 扩展字符串</span><br>    str = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">realloc</span>(str, <span class="hljs-number">11</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));  <span class="hljs-comment">// 重新分配内存</span><br>    <span class="hljs-built_in">strcat</span>(str, <span class="hljs-string">&quot; World&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);  <span class="hljs-comment">// 输出 &quot;Hello World&quot;</span><br><br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-built_in">free</span>(str);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>c/c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
